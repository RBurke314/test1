#!/usr/bin/python

# Import the required modules
print "Initialising..."
import cv2,os
import numpy as np
from PIL import Image
import time
import sys
from matplotlib import pyplot as plt


path = './templates'
cap = cv2.VideoCapture(0)
img = cv2.imread('C:/PyProjects/VisionSystem/Vision9/detectedimg/sample04.wiki.jpg',0)
cv2.imshow('detected image',img)
cv2.waitKey(0)
cv2.destroyAllWindows()    

template = cv2.imread('C:/PyProjects/VisionSystem/Vision9/templates/sample01.facebook.jpg',0)
template3 = Image.open('C:/PyProjects/VisionSystem/Vision9/templates/sample04.wiki.jpg')
templatenp = np.array(template3, 'uint8')

    



while True:
    ret, img = cap.read()
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    #faces = detector.detectMultiScale(img, 1.3, 5)
    #for (x,y,w,h) in faces:
        #cv2.rectangle(img,(x,y),(x+w,y+h),(255,0,0),2)

    cv2.imshow('frame',img)
    
    # Append the images with the extension .sad into image_paths
    image_paths = [os.path.join(path, f) for f in os.listdir(path) ] #if f.endswith('.sad')
    #img = cv2.imread('C:/PyProjects/VisionSystem/Vision9/templates/sample01.facebook.jpg',0)
    #template =img
    
    i = 0
    for image_path in image_paths:
        

        newimg = Image.open(image_path)
        npimg = np.array(newimg, 'uint8')
        
        w, h = template.shape[::-1]
        # All the 6 methods for comparison in a list
        methods = ['cv2.TM_CCOEFF_NORMED']
        
        i += 1
        s = 'Sample ' + repr(i)
        print(s)
        for meth in methods:
            
            thres =90
            
            method = eval(meth)
            #Apply template Matching
            res = cv2.matchTemplate(npimg,templatenp,method)
            min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(res)
            value = (res/1)*100
            print(value)
            
            #If the method is TM_SQDIFF or TM_SQDIFF_NORMED, take minimum
            if method in [cv2.TM_CCOEFF_NORMED]:
                if value>thres:
                    print('Positive Match')
                    #cv2.imshow("resized", npimg)
                #print(min_val)
            #else:
                #top_left = max_loc
                #print(max_val)
            #bottom_right = (top_left[0] + w, top_left[1] + h)
        

        #r = 300.0 / npimg.shape[1]
        #dim = (300, int(npimg.shape[0] * r))

        # perform the actual resizing of the image and show it
        #resized = cv2.resize(npimg, dim, interpolation = cv2.INTER_AREA)

        #cv2.imshow("resized", resized)
        cv2.waitKey(500)
        
        #cv2.waitKey(0)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
        

